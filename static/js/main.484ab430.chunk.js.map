{"version":3,"sources":["FormComponent.jsx","TableShow.jsx","App.js","serviceWorker.js","index.js"],"names":["FormComponent","props","onSubmit","handleSubmit","autoComplete","name","value","onChange","handleChange","placeholder","email","address","TableShow","users","length","map","user","key","id","className","onClick","handleDelete","colSpan","App","newArr","state","filter","setState","event","target","preventDefault","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQA+BeA,G,MA7BO,SAAAC,GACpB,OACE,kCACE,4CACA,0BAAMC,SAAUD,EAAME,aAAcC,aAAa,OAC/C,2BACEC,KAAK,OACLC,MAAOL,EAAMI,KACbE,SAAUN,EAAMO,aAChBC,YAAY,SAEd,2BACEJ,KAAK,QACLC,MAAOL,EAAMS,MACbH,SAAUN,EAAMO,aAChBC,YAAY,UAEd,2BACEJ,KAAK,UACLC,MAAOL,EAAMU,QACbJ,SAAUN,EAAMO,aAChBC,YAAY,YAEd,4CCvBO,SAASG,EAAUX,GAChC,OACE,kCACE,yCACA,+BACE,+BACE,4BACE,oCACA,qCACA,uCACA,wCAGJ,+BACGA,EAAMY,MAAMC,OAAS,EACpBb,EAAMY,MAAME,KAAI,SAAAC,GAAI,OAClB,wBAAIC,IAAKD,EAAKE,IACZ,4BAAKF,EAAKX,MACV,4BAAKW,EAAKN,OACV,4BAAKM,EAAKL,SACV,4BACE,4BACEQ,UAAU,YACVC,QAAS,kBAAMnB,EAAMoB,aAAaL,EAAKE,MAFzC,UAUN,4BACE,wBAAII,QAAQ,KAAZ,qB,IC7BOC,E,YACnB,aAAe,IAAD,8BACZ,+CAQFF,aAAe,SAAAH,GACb,IAAIM,EAAS,EAAKC,MAAMZ,MAAMa,QAAO,SAAAV,GAAI,OAAIE,IAAOF,EAAKE,MACzD,EAAKS,SAAS,CACZd,MAAOW,KAZG,EAedhB,aAAe,SAAAoB,GACb,EAAKD,SAAL,eACGC,EAAMC,OAAOxB,KAAOuB,EAAMC,OAAOvB,SAjBxB,EAoBdH,aAAe,SAAAyB,GACbA,EAAME,iBACF,EAAKL,MAAMpB,KAAKS,OAAS,GAC3B,EAAKa,SAAS,CACZd,MAAM,GAAD,mBACA,EAAKY,MAAMZ,OADX,CAEH,CACER,KAAM,EAAKoB,MAAMpB,KACjBK,MAAO,EAAKe,MAAMf,MAClBC,QAAS,EAAKc,MAAMd,QACpBO,GAAI,EAAKO,MAAMZ,MAAMC,aA5B7B,EAAKW,MAAQ,CACXpB,KAAM,GACNK,MAAO,GACPC,QAAS,GACTE,MAAO,IANG,E,sEAqCZ,OACE,yBAAKM,UAAU,OACb,kBAAC,EAAD,CACEhB,aAAc4B,KAAK5B,aACnBK,aAAcuB,KAAKvB,aACnBH,KAAM0B,KAAKN,MAAMpB,KACjBK,MAAOqB,KAAKN,MAAMf,MAClBC,QAASoB,KAAKN,MAAMd,UAEtB,kBAACC,EAAD,CAAWC,MAAOkB,KAAKN,MAAMZ,MAAOQ,aAAcU,KAAKV,oB,GA/C9BW,IAAMC,WCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.484ab430.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst FormComponent = props => {\r\n  return (\r\n    <fieldset>\r\n      <legend>New User</legend>\r\n      <form onSubmit={props.handleSubmit} autoComplete=\"off\">\r\n        <input\r\n          name=\"name\"\r\n          value={props.name}\r\n          onChange={props.handleChange}\r\n          placeholder=\"name\"\r\n        />\r\n        <input\r\n          name=\"email\"\r\n          value={props.email}\r\n          onChange={props.handleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <input\r\n          name=\"address\"\r\n          value={props.address}\r\n          onChange={props.handleChange}\r\n          placeholder=\"Address\"\r\n        />\r\n        <button>Save</button>\r\n      </form>\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport default FormComponent;\r\n","import React from \"react\";\r\n\r\nexport default function TableShow(props) {\r\n  return (\r\n    <fieldset>\r\n      <legend>Users</legend>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Address</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.users.length > 0 ? (\r\n            props.users.map(user => (\r\n              <tr key={user.id}>\r\n                <td>{user.name}</td>\r\n                <td>{user.email}</td>\r\n                <td>{user.address}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"deleteBtn\"\r\n                    onClick={() => props.handleDelete(user.id)}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colSpan=\"4\">No Users Yet!</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </fieldset>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FormComponent from \"./FormComponent\";\nimport TableShow from \"./TableShow\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\",\n      address: \"\",\n      users: []\n    };\n  }\n  handleDelete = id => {\n    let newArr = this.state.users.filter(user => id !== user.id);\n    this.setState({\n      users: newArr\n    });\n  };\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.state.name.length > 0) {\n      this.setState({\n        users: [\n          ...this.state.users,\n          {\n            name: this.state.name,\n            email: this.state.email,\n            address: this.state.address,\n            id: this.state.users.length\n          }\n        ]\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <FormComponent\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n          name={this.state.name}\n          email={this.state.email}\n          address={this.state.address}\n        />\n        <TableShow users={this.state.users} handleDelete={this.handleDelete} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}